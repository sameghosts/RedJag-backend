make index

mkdir: directives, resolves, typeDefs

directives 
  Authdirective

resolvers 
  index
    greeting -  for server spoof
    user - 
    search - 
    jobs -
    todo - 
    journal - 
    reminders -

typeDefs 
  index
    #### MVP requirements: 
    greeting -  for server spoof
    user - Created, Stubbed, 
    jobs - Created, Stubbed,
      job object 
      JobCollections
    journal - Created, Stubbed
    
    #### next steps: 

    todo - 
    reminders -


user typeDef 
user = gql`
#user type base def 
  type User {
    id: ID!
    email: String!
    username: String!
    first_name: String!
    last_name: String!
  }
#user queries
#user mutations

`
##Todo 
- [x] Add Mutations 
- [x] Fix User 
- [] Go Through Q n M for MVP Scope
- [] Add ID values and C@/U@ values
- [] Structure query logic
- [] Move over Query n Mutations
- [] Move over psuedo
- [] push resolver functionality for 3 models




______________________________________
======================================
--------------------------------------
======================================
______________________________________
Project Big Query and Mutations Chart

===== USER 
Queries: {
*** [ x ] LoginUser ***
*** [] UserInfoAuth ***
*** [] getLiuProfile ***
*** [] getLiuLoc ***
*** [] getLiuIdentity ***
getSkillset [part of query param type - hard soft stack]
getPubProfile
}


Mutations: {
  *** [x] RegisterUser - Registers the user / write 2 User
  *** [] UpdateProfile - Update profile
  *** [] UpdateLoc - update location
  *** [] createJournalonUser
  *** [] CreateCollectionOnUser 

  AddSkill - adds a skill see below about input and write
  update skill - make skill input object, comes with extra parameter for if hard soft or stack
  }


===== JOURNAL 
Queries: {
  *** [] AllEntries
  *** [] EntryAtId
  *** [] EntryContactAll
  *** [] getEntryNotes
  *** [] getEntryRemind

  EntryContactID
  getContactRemind
  getContactNotes
}


Mutations: {
*** [x] addJournal
*** [x] addJournalEntry
*** [] updateEntry
*** [] delEntry
*** [] addEntryNotes
*** [] updateEntryNotes
*** [] addContact

addEntryReminder
updateEntryReminder
delEntryReminder
delContact
addNotesContact
updateNotesContact
updateReminder
delReminder

}

===== JOB 
Queries: {
*** [] getAPISearch
*** [] recentCache10
*** [] recentCache50
*** [] AllFaved
*** [] getAllApplied
*** [] getDataForAnalysis
*** [] getNLPResults
*** [] getNLPAtId

FavedByParam
getFromAllifMatch
}


Mutations: {
*** [x] CreateCollection
*** [x] addJobs (which can be more specific made into search sesh)
*** [] saveSearchSession
*** [] faveJob
*** [] unFaveJob
*** [] addAppliedandPushJournal
*** [] saveNLPdataSet
*** [] createNLP
*** [] saveNLPInstance
*** [] clearUpdate10Cache
*** [] clearUpdate60Cache

}

addjobstype 
[
    {
      "title": "Full Stack Engineer 1",
      "companyName": "Google",
      "location": "New York, NY",
      "jobApiId": "as;dlkjaasdl;fjpoweirjpweoignpoasdfp"
    },
    {
      "title": "Front End Engineer 1",
      "companyName": "Amazon",
      "location": "New York, NY",
      "jobApiId": "werpouewrpoew"
    }, 
    {
      "title": "Back End Engineer 1",
      "companyName": "Capsule",
      "location": "New York, NY",
      "jobApiId": "asdl;kj;asdfasdfasdfsadfasldkf"
    }
    
  ]

  promise chain that writes to database 
  JobCollection.find 
        JobCollection.find(
          {userEmail: userEmail }
        ).then(collection =>{
          let easyCol = collection[0]
          if(easyCol.faveJobs.length <1 ){
            easyCol.faveJobs = [...dump]
            easyCol.save()
            return easyCol
          }
          else if (easyCol.faveJobs.length > 1){
            let newfaveJobs = [...easyCol.faveJobs, ...dump]
            easyCol.faveJobs = newfaveJobs
            // console.log(`easyCol zero post destruct dump ${easyCol}`)
            easyCol.save()
            return easyCol
          }
          }).catch(err =>{
            throw new ApolloError(err.message, 404)

          });